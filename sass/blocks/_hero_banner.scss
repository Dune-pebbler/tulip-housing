.hero {
  // Set the height and create the positioning context on the section itself.
  height: 100vh;
  position: relative;
  z-index: 29;

  // Use Flexbox to control the alignment of the overlay content.
  display: flex;
  align-items: center; // Vertically centers the overlay.

  // Media query for the section's height on smaller screens.
  @media screen and (max-width: 576px) {
    height: 450px;
    // Align content to the bottom on mobile, as per your original design.
    align-items: flex-end;
  }

  // The image is now the background.
  &__img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    // z-index pushes the image behind the content.
    z-index: -1;
  }

  // The overlay is now a standard flex item. No absolute positioning needed.
  &__overlay {
    width: 100%;
  }

  // Title container positioning is now simpler.
  &__title-container {
    max-width: 800px;

    @media screen and (max-width: 576px) {
      margin-left: 10px;
      // This adds space from the bottom edge on mobile.
      margin-bottom: 50px;
      max-width: 300px;
    }

    h1 {
      color: white;
      font-size: clamp(2rem, 8vw, 5.5rem);
      text-transform: uppercase;
    }
  }
}
